{"{\"assumptions\":{},\"sourceRoot\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\\\\app\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\",\"filename\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\\\\app\\\\app.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.23.6:development":{"value":{"code":"const express = require('express');\nconst db = require('../db/db');\nconst imageRoutes = require('../routers/imageRouter');\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Kết nối đến cơ sở dữ liệu PostgreSQL\ndb.connect();\n\n// Middleware để xử lý các request có nội dung JSON\napp.use(express.json());\n\n// Sử dụng định tuyến cho ảnh\napp.use('/api/images', imageRoutes);\n\n// Khởi động server\napp.listen(port, () => {\n  console.log(`Server is running on port http://localhost:${port}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImRiIiwiaW1hZ2VSb3V0ZXMiLCJhcHAiLCJwb3J0IiwicHJvY2VzcyIsImVudiIsIlBPUlQiLCJjb25uZWN0IiwidXNlIiwianNvbiIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IkQ6XFxQSEFNSFVOR1xcY29kZS1kZW1vXFxjb3ZlckltYWdlXFxhcHBcXCIsInNvdXJjZXMiOlsiYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XHJcbmNvbnN0IGRiID0gcmVxdWlyZSgnLi4vZGIvZGInKVxyXG5jb25zdCBpbWFnZVJvdXRlcyA9IHJlcXVpcmUoJy4uL3JvdXRlcnMvaW1hZ2VSb3V0ZXInKTtcclxuXHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcclxuY29uc3QgcG9ydCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDtcclxuXHJcbi8vIEvhur90IG7hu5FpIMSR4bq/biBjxqEgc+G7nyBk4buvIGxp4buHdSBQb3N0Z3JlU1FMXHJcbmRiLmNvbm5lY3QoKTtcclxuXHJcbi8vIE1pZGRsZXdhcmUgxJHhu4MgeOG7rSBsw70gY8OhYyByZXF1ZXN0IGPDsyBu4buZaSBkdW5nIEpTT05cclxuYXBwLnVzZShleHByZXNzLmpzb24oKSk7XHJcblxyXG4vLyBT4butIGThu6VuZyDEkeG7i25oIHR1eeG6v24gY2hvIOG6o25oXHJcbmFwcC51c2UoJy9hcGkvaW1hZ2VzJywgaW1hZ2VSb3V0ZXMpO1xyXG5cclxuLy8gS2jhu59pIMSR4buZbmcgc2VydmVyXHJcbmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKGBTZXJ2ZXIgaXMgcnVubmluZyBvbiBwb3J0IGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fWApO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQzlCLE1BQU1FLFdBQVcsR0FBR0YsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0FBRXJELE1BQU1HLEdBQUcsR0FBR0osT0FBTyxDQUFDLENBQUM7QUFDckIsTUFBTUssSUFBSSxHQUFHQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsSUFBSSxJQUFJLElBQUk7O0FBRXJDO0FBQ0FOLEVBQUUsQ0FBQ08sT0FBTyxDQUFDLENBQUM7O0FBRVo7QUFDQUwsR0FBRyxDQUFDTSxHQUFHLENBQUNWLE9BQU8sQ0FBQ1csSUFBSSxDQUFDLENBQUMsQ0FBQzs7QUFFdkI7QUFDQVAsR0FBRyxDQUFDTSxHQUFHLENBQUMsYUFBYSxFQUFFUCxXQUFXLENBQUM7O0FBRW5DO0FBQ0FDLEdBQUcsQ0FBQ1EsTUFBTSxDQUFDUCxJQUFJLEVBQUUsTUFBTTtFQUNyQlEsT0FBTyxDQUFDQyxHQUFHLENBQUUsOENBQTZDVCxJQUFLLEVBQUMsQ0FBQztBQUNuRSxDQUFDLENBQUMifQ==","map":{"version":3,"names":["express","require","db","imageRoutes","app","port","process","env","PORT","connect","use","json","listen","console","log"],"sourceRoot":"D:\\PHAMHUNG\\code-demo\\coverImage\\app\\","sources":["app.js"],"sourcesContent":["const express = require('express');\r\nconst db = require('../db/db')\r\nconst imageRoutes = require('../routers/imageRouter');\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// Kết nối đến cơ sở dữ liệu PostgreSQL\r\ndb.connect();\r\n\r\n// Middleware để xử lý các request có nội dung JSON\r\napp.use(express.json());\r\n\r\n// Sử dụng định tuyến cho ảnh\r\napp.use('/api/images', imageRoutes);\r\n\r\n// Khởi động server\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port http://localhost:${port}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,EAAE,GAAGD,OAAO,CAAC,UAAU,CAAC;AAC9B,MAAME,WAAW,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAErD,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACC,IAAI,IAAI,IAAI;;AAErC;AACAN,EAAE,CAACO,OAAO,CAAC,CAAC;;AAEZ;AACAL,GAAG,CAACM,GAAG,CAACV,OAAO,CAACW,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACAP,GAAG,CAACM,GAAG,CAAC,aAAa,EAAEP,WAAW,CAAC;;AAEnC;AACAC,GAAG,CAACQ,MAAM,CAACP,IAAI,EAAE,MAAM;EACrBQ,OAAO,CAACC,GAAG,CAAE,8CAA6CT,IAAK,EAAC,CAAC;AACnE,CAAC,CAAC"}},"mtime":1703834756747},"{\"assumptions\":{},\"sourceRoot\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\\\\db\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\",\"filename\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\\\\db\\\\db.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.23.6:development":{"value":{"code":"const {\n  Pool\n} = require('pg');\nconst pool = new Pool({\n  user: 'converimagedb_user',\n  host: 'dpg-cm73mlocmk4c738rih20-a.singapore-postgres.render.com',\n  database: 'converimagedb',\n  password: 'HP4EWDBbcQPh6NaGzvH5oxe3PvHGfFnd',\n  port: 5432,\n  ssl: {\n    rejectUnauthorized: false // Bạn có thể cần cấu hình phù hợp với môi trường sản xuất\n  }\n});\nmodule.exports = pool;\n// postgres://converimagedb_user:HP4EWDBbcQPh6NaGzvH5oxe3PvHGfFnd@dpg-cm73mlocmk4c738rih20-a/converimagedb\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQb29sIiwicmVxdWlyZSIsInBvb2wiLCJ1c2VyIiwiaG9zdCIsImRhdGFiYXNlIiwicGFzc3dvcmQiLCJwb3J0Iiwic3NsIiwicmVqZWN0VW5hdXRob3JpemVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiRDpcXFBIQU1IVU5HXFxjb2RlLWRlbW9cXGNvdmVySW1hZ2VcXGRiXFwiLCJzb3VyY2VzIjpbImRiLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgUG9vbCB9ID0gcmVxdWlyZSgncGcnKTtcclxuXHJcbmNvbnN0IHBvb2wgPSBuZXcgUG9vbCh7XHJcbiAgdXNlcjogJ2NvbnZlcmltYWdlZGJfdXNlcicsXHJcbiAgaG9zdDogJ2RwZy1jbTczbWxvY21rNGM3MzhyaWgyMC1hLnNpbmdhcG9yZS1wb3N0Z3Jlcy5yZW5kZXIuY29tJyxcclxuICBkYXRhYmFzZTogJ2NvbnZlcmltYWdlZGInLFxyXG4gIHBhc3N3b3JkOiAnSFA0RVdEQmJjUVBoNk5hR3p2SDVveGUzUHZIR2ZGbmQnLFxyXG4gIHBvcnQ6IDU0MzIsXHJcbiAgc3NsOiB7XHJcbiAgICByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlLCAvLyBC4bqhbiBjw7MgdGjhu4MgY+G6p24gY+G6pXUgaMOsbmggcGjDuSBo4bujcCB24bubaSBtw7RpIHRyxrDhu51uZyBz4bqjbiB4deG6pXRcclxuICB9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcG9vbDtcclxuLy8gcG9zdGdyZXM6Ly9jb252ZXJpbWFnZWRiX3VzZXI6SFA0RVdEQmJjUVBoNk5hR3p2SDVveGUzUHZIR2ZGbmRAZHBnLWNtNzNtbG9jbWs0YzczOHJpaDIwLWEvY29udmVyaW1hZ2VkYiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTTtFQUFFQTtBQUFLLENBQUMsR0FBR0MsT0FBTyxDQUFDLElBQUksQ0FBQztBQUU5QixNQUFNQyxJQUFJLEdBQUcsSUFBSUYsSUFBSSxDQUFDO0VBQ3BCRyxJQUFJLEVBQUUsb0JBQW9CO0VBQzFCQyxJQUFJLEVBQUUsMERBQTBEO0VBQ2hFQyxRQUFRLEVBQUUsZUFBZTtFQUN6QkMsUUFBUSxFQUFFLGtDQUFrQztFQUM1Q0MsSUFBSSxFQUFFLElBQUk7RUFDVkMsR0FBRyxFQUFFO0lBQ0hDLGtCQUFrQixFQUFFLEtBQUssQ0FBRTtFQUM3QjtBQUNGLENBQUMsQ0FBQztBQUVGQyxNQUFNLENBQUNDLE9BQU8sR0FBR1QsSUFBSTtBQUNyQiJ9","map":{"version":3,"names":["Pool","require","pool","user","host","database","password","port","ssl","rejectUnauthorized","module","exports"],"sourceRoot":"D:\\PHAMHUNG\\code-demo\\coverImage\\db\\","sources":["db.js"],"sourcesContent":["const { Pool } = require('pg');\r\n\r\nconst pool = new Pool({\r\n  user: 'converimagedb_user',\r\n  host: 'dpg-cm73mlocmk4c738rih20-a.singapore-postgres.render.com',\r\n  database: 'converimagedb',\r\n  password: 'HP4EWDBbcQPh6NaGzvH5oxe3PvHGfFnd',\r\n  port: 5432,\r\n  ssl: {\r\n    rejectUnauthorized: false, // Bạn có thể cần cấu hình phù hợp với môi trường sản xuất\r\n  },\r\n});\r\n\r\nmodule.exports = pool;\r\n// postgres://converimagedb_user:HP4EWDBbcQPh6NaGzvH5oxe3PvHGfFnd@dpg-cm73mlocmk4c738rih20-a/converimagedb"],"mappings":"AAAA,MAAM;EAAEA;AAAK,CAAC,GAAGC,OAAO,CAAC,IAAI,CAAC;AAE9B,MAAMC,IAAI,GAAG,IAAIF,IAAI,CAAC;EACpBG,IAAI,EAAE,oBAAoB;EAC1BC,IAAI,EAAE,0DAA0D;EAChEC,QAAQ,EAAE,eAAe;EACzBC,QAAQ,EAAE,kCAAkC;EAC5CC,IAAI,EAAE,IAAI;EACVC,GAAG,EAAE;IACHC,kBAAkB,EAAE,KAAK,CAAE;EAC7B;AACF,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAGT,IAAI;AACrB"}},"mtime":1703821029671},"{\"assumptions\":{},\"sourceRoot\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\\\\routers\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\",\"filename\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\\\\routers\\\\imageRouter.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.23.6:development":{"value":{"code":"const express = require('express');\nconst imageController = require('../controllers/imageController');\nconst router = express.Router();\nrouter.post('/convert-and-save', async (req, res) => {\n  try {\n    const {\n      outputImagePath,\n      outputPath,\n      customFileName\n    } = req.body;\n    await imageController.convertAndSaveToDB(outputImagePath, outputPath, customFileName);\n    res.status(200).json({\n      message: 'Conversion and saving completed successfully'\n    });\n  } catch (error) {\n    console.error('Error:', error);\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\n\n// router.post('/convert', async (req, res) => {\n//     const { outputImagePath, partWidth, partHeight } = req.body;\n\n//     // Kiểm tra dữ liệu đầu vào\n//     if (!outputImagePath || !partWidth || !partHeight) {\n//         return res.status(400).json({ error: 'Missing required parameters.' });\n//     }\n\n//     try {\n//         // Gọi hàm chuyển đổi từ imageController\n//        const data =  await imageController.textToImage(outputImagePath, partWidth, partHeight);\n//         res.json({ message: 'Conversion completed successfully.', data: data });\n//     } catch (error) {\n//         console.error('Error:', error);\n//         res.status(500).json({ error: 'Internal server error.' });\n//     }\n// });\n\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImltYWdlQ29udHJvbGxlciIsInJvdXRlciIsIlJvdXRlciIsInBvc3QiLCJyZXEiLCJyZXMiLCJvdXRwdXRJbWFnZVBhdGgiLCJvdXRwdXRQYXRoIiwiY3VzdG9tRmlsZU5hbWUiLCJib2R5IiwiY29udmVydEFuZFNhdmVUb0RCIiwic3RhdHVzIiwianNvbiIsIm1lc3NhZ2UiLCJlcnJvciIsImNvbnNvbGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiJEOlxcUEhBTUhVTkdcXGNvZGUtZGVtb1xcY292ZXJJbWFnZVxccm91dGVyc1xcIiwic291cmNlcyI6WyJpbWFnZVJvdXRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xyXG5jb25zdCBpbWFnZUNvbnRyb2xsZXIgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycy9pbWFnZUNvbnRyb2xsZXInKTtcclxuXHJcbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XHJcblxyXG5yb3V0ZXIucG9zdCgnL2NvbnZlcnQtYW5kLXNhdmUnLCBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBvdXRwdXRJbWFnZVBhdGgsIG91dHB1dFBhdGgsIGN1c3RvbUZpbGVOYW1lIH0gPSByZXEuYm9keTtcclxuICAgIGF3YWl0IGltYWdlQ29udHJvbGxlci5jb252ZXJ0QW5kU2F2ZVRvREIob3V0cHV0SW1hZ2VQYXRoLCBvdXRwdXRQYXRoLCBjdXN0b21GaWxlTmFtZSk7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IG1lc3NhZ2U6ICdDb252ZXJzaW9uIGFuZCBzYXZpbmcgY29tcGxldGVkIHN1Y2Nlc3NmdWxseScgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InIH0pO1xyXG4gIH1cclxufSk7XHJcblxyXG4vLyByb3V0ZXIucG9zdCgnL2NvbnZlcnQnLCBhc3luYyAocmVxLCByZXMpID0+IHtcclxuLy8gICAgIGNvbnN0IHsgb3V0cHV0SW1hZ2VQYXRoLCBwYXJ0V2lkdGgsIHBhcnRIZWlnaHQgfSA9IHJlcS5ib2R5O1xyXG5cclxuLy8gICAgIC8vIEtp4buDbSB0cmEgZOG7ryBsaeG7h3UgxJHhuqd1IHbDoG9cclxuLy8gICAgIGlmICghb3V0cHV0SW1hZ2VQYXRoIHx8ICFwYXJ0V2lkdGggfHwgIXBhcnRIZWlnaHQpIHtcclxuLy8gICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVycy4nIH0pO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHRyeSB7XHJcbi8vICAgICAgICAgLy8gR+G7jWkgaMOgbSBjaHV54buDbiDEkeG7lWkgdOG7qyBpbWFnZUNvbnRyb2xsZXJcclxuLy8gICAgICAgIGNvbnN0IGRhdGEgPSAgYXdhaXQgaW1hZ2VDb250cm9sbGVyLnRleHRUb0ltYWdlKG91dHB1dEltYWdlUGF0aCwgcGFydFdpZHRoLCBwYXJ0SGVpZ2h0KTtcclxuLy8gICAgICAgICByZXMuanNvbih7IG1lc3NhZ2U6ICdDb252ZXJzaW9uIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuJywgZGF0YTogZGF0YSB9KTtcclxuLy8gICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbi8vICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IpO1xyXG4vLyAgICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3IuJyB9KTtcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXI7Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTUMsZUFBZSxHQUFHRCxPQUFPLENBQUMsZ0NBQWdDLENBQUM7QUFFakUsTUFBTUUsTUFBTSxHQUFHSCxPQUFPLENBQUNJLE1BQU0sQ0FBQyxDQUFDO0FBRS9CRCxNQUFNLENBQUNFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxPQUFPQyxHQUFHLEVBQUVDLEdBQUcsS0FBSztFQUNuRCxJQUFJO0lBQ0YsTUFBTTtNQUFFQyxlQUFlO01BQUVDLFVBQVU7TUFBRUM7SUFBZSxDQUFDLEdBQUdKLEdBQUcsQ0FBQ0ssSUFBSTtJQUNoRSxNQUFNVCxlQUFlLENBQUNVLGtCQUFrQixDQUFDSixlQUFlLEVBQUVDLFVBQVUsRUFBRUMsY0FBYyxDQUFDO0lBQ3JGSCxHQUFHLENBQUNNLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQUVDLE9BQU8sRUFBRTtJQUErQyxDQUFDLENBQUM7RUFDbkYsQ0FBQyxDQUFDLE9BQU9DLEtBQUssRUFBRTtJQUNkQyxPQUFPLENBQUNELEtBQUssQ0FBQyxRQUFRLEVBQUVBLEtBQUssQ0FBQztJQUM5QlQsR0FBRyxDQUFDTSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUFFRSxLQUFLLEVBQUU7SUFBd0IsQ0FBQyxDQUFDO0VBQzFEO0FBQ0YsQ0FBQyxDQUFDOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBRSxNQUFNLENBQUNDLE9BQU8sR0FBR2hCLE1BQU0ifQ==","map":{"version":3,"names":["express","require","imageController","router","Router","post","req","res","outputImagePath","outputPath","customFileName","body","convertAndSaveToDB","status","json","message","error","console","module","exports"],"sourceRoot":"D:\\PHAMHUNG\\code-demo\\coverImage\\routers\\","sources":["imageRouter.js"],"sourcesContent":["const express = require('express');\r\nconst imageController = require('../controllers/imageController');\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post('/convert-and-save', async (req, res) => {\r\n  try {\r\n    const { outputImagePath, outputPath, customFileName } = req.body;\r\n    await imageController.convertAndSaveToDB(outputImagePath, outputPath, customFileName);\r\n    res.status(200).json({ message: 'Conversion and saving completed successfully' });\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n    res.status(500).json({ error: 'Internal Server Error' });\r\n  }\r\n});\r\n\r\n// router.post('/convert', async (req, res) => {\r\n//     const { outputImagePath, partWidth, partHeight } = req.body;\r\n\r\n//     // Kiểm tra dữ liệu đầu vào\r\n//     if (!outputImagePath || !partWidth || !partHeight) {\r\n//         return res.status(400).json({ error: 'Missing required parameters.' });\r\n//     }\r\n\r\n//     try {\r\n//         // Gọi hàm chuyển đổi từ imageController\r\n//        const data =  await imageController.textToImage(outputImagePath, partWidth, partHeight);\r\n//         res.json({ message: 'Conversion completed successfully.', data: data });\r\n//     } catch (error) {\r\n//         console.error('Error:', error);\r\n//         res.status(500).json({ error: 'Internal server error.' });\r\n//     }\r\n// });\r\n\r\n\r\nmodule.exports = router;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,eAAe,GAAGD,OAAO,CAAC,gCAAgC,CAAC;AAEjE,MAAME,MAAM,GAAGH,OAAO,CAACI,MAAM,CAAC,CAAC;AAE/BD,MAAM,CAACE,IAAI,CAAC,mBAAmB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACnD,IAAI;IACF,MAAM;MAAEC,eAAe;MAAEC,UAAU;MAAEC;IAAe,CAAC,GAAGJ,GAAG,CAACK,IAAI;IAChE,MAAMT,eAAe,CAACU,kBAAkB,CAACJ,eAAe,EAAEC,UAAU,EAAEC,cAAc,CAAC;IACrFH,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA+C,CAAC,CAAC;EACnF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9BT,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEE,KAAK,EAAE;IAAwB,CAAC,CAAC;EAC1D;AACF,CAAC,CAAC;;AAEF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAE,MAAM,CAACC,OAAO,GAAGhB,MAAM"}},"mtime":1703838586814},"{\"assumptions\":{},\"sourceRoot\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\\\\controllers\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\",\"filename\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\\\\controllers\\\\imageController.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\PHAMHUNG\\\\code-demo\\\\coverImage\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.23.6:development":{"value":{"code":"const fs = require('fs');\nconst sharp = require('sharp');\nconst db = require('../db/db');\nasync function imageToText(inputImagePath, outputFolder, customFileName) {\n  // ... (phần code chuyển đổi từ trước)\n  // Kích thước của từng phần nhỏ\n  // const partWidth = 4816;\n  // const partHeight = 3072;\n  // const partWidth = 2600;\n  // const partHeight = 3184;\n  // const partWidth = 5760;\n  // const partHeight = 3336;\n  // const partWidth = 4242;\n  // const partHeight = 2456;\n  // const partWidth = 5372;\n  // const partHeight = 2824;\n  const partWidth = 8192;\n  const partHeight = 4096;\n  // Zoom factor\n  const zoom = 1.0;\n  // Đọc ảnh và chuyển đổi thành các phần nhỏ\n  const imageBuffer = fs.readFileSync(inputImagePath);\n  const image = sharp(imageBuffer);\n\n  // Tạo thư mục đầu ra nếu chưa tồn tại\n  if (!fs.existsSync(outputFolder)) {\n    fs.mkdirSync(outputFolder);\n  }\n  // Chuyển đổi và ghi vào các file văn bản\n  const imageMetadata = await image.metadata();\n  console.log('Image Metadata:', imageMetadata);\n  const resizedWidth = imageMetadata.width * zoom;\n  const resizedHeight = imageMetadata.height * zoom;\n  for (let top = 0; top < imageMetadata.height; top += partHeight) {\n    console.log('Vào vòng lặp top');\n    for (let left = 0; left < imageMetadata.width; left += partWidth) {\n      console.log('Vào vòng lặp left');\n      const adjustedWidth = Math.min(partWidth, imageMetadata.width - left);\n      const adjustedHeight = Math.min(partHeight, imageMetadata.height - top);\n      const adjustedLeft = Math.max(0, left);\n      const adjustedTop = Math.max(0, top);\n      const leftPercentage = adjustedLeft / imageMetadata.width;\n      const topPercentage = adjustedTop / imageMetadata.height;\n      const resizedBuffer = await image.jpeg().resize(resizedWidth, resizedHeight).toBuffer();\n      const extractedBuffer = await sharp(resizedBuffer).extract({\n        left: Math.floor(leftPercentage * resizedWidth),\n        top: Math.floor(topPercentage * resizedHeight),\n        width: adjustedWidth,\n        height: adjustedHeight\n      }).resize(adjustedWidth, adjustedHeight).toBuffer();\n      const base64String = 'data:image/jpeg;base64,' + Buffer.from(extractedBuffer).toString('base64');\n      for (let partIndex = 0; partIndex < 10; partIndex++) {\n        const partBase64String = base64String.substring(partIndex * (base64String.length / 10), (partIndex + 1) * (base64String.length / 10));\n        const partFileName = `${outputFolder}/${customFileName}_part${partIndex + 1}.txt`;\n        fs.writeFileSync(partFileName, partBase64String);\n        console.log('Đã ghi file:', partFileName);\n      }\n    }\n  }\n  console.log('Image to text conversion completed.');\n}\nasync function convertAndSaveToDB(inputImagePath, outputFolder, customFileName) {\n  try {\n    await imageToText(inputImagePath, outputFolder, customFileName);\n\n    // const files = fs.readdirSync(outputFolder);\n\n    // for (const file of files) {\n    //     const content = fs.readFileSync(`${outputFolder}/${file}`, 'base64');\n    //     await db.query('INSERT INTO images(name, content) VALUES($1, $2)', [file, content]);\n    // }\n    console.log('Conversion and saving completed successfully');\n  } catch (error) {\n    console.error('Error:', error);\n    throw new Error('Conversion and saving failed');\n  }\n}\n\n// async function textToImage(outputImagePath, partWidth, partHeight) {\n//     try {\n//         // Thực hiện truy vấn cơ sở dữ liệu để lấy dữ liệu từ bảng 'images'\n//         const result = await db.query('SELECT name, content FROM images');\n\n//         if (result.rows.length === 0) {\n//             console.error('No data found in the images table.');\n//             return;\n//         }\n\n//         // Chuyển đổi từng bản ghi từ cơ sở dữ liệu thành ảnh và lưu vào mảng\n//         const images = await Promise.all(result.rows.map(async (row) => {\n//             const base64Data = row.content.replace(/\\\\/g, \"\");\n//             const buffer = Buffer.from(base64Data, 'base64');\n//             console.log(base64Data);\n//             return buffer;\n//         }));\n\n//         const firstImageMetadata = await sharp(images[0]).metadata();\n\n//         // Gộp ảnh\n//         const mergedImage = await sharp({\n//             create: {\n//                 width: partWidth * Math.ceil(firstImageMetadata.width / partWidth),\n//                 height: partHeight * Math.ceil(firstImageMetadata.height / partHeight),\n//                 channels: 4, // Số kênh màu (4 cho RGBA)\n//                 background: { r: 255, g: 255, b: 255, alpha: 1 } // Màu nền\n//             }\n//         });\n\n//         // Sử dụng phương thức composite để gộp ảnh\n//         for (const image of images) {\n//             mergedImage.composite([{ input: image, left: 0, top: 0 }]);\n//         }\n\n//         // Ghi ảnh gộp vào file với định dạng PNG\n//         await mergedImage.toFormat('png').toFile(outputImagePath);\n//         console.log('Text to image conversion completed.');\n\n//         // Trả về đường dẫn tới tệp tin ảnh đã tạo\n//         return outputImagePath;\n//     } catch (error) {\n//         console.error('Error during conversion:', error);\n//         throw error;\n//     }\n// }\n\nmodule.exports = {\n  convertAndSaveToDB\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["fs","require","sharp","db","imageToText","inputImagePath","outputFolder","customFileName","partWidth","partHeight","zoom","imageBuffer","readFileSync","image","existsSync","mkdirSync","imageMetadata","metadata","console","log","resizedWidth","width","resizedHeight","height","top","left","adjustedWidth","Math","min","adjustedHeight","adjustedLeft","max","adjustedTop","leftPercentage","topPercentage","resizedBuffer","jpeg","resize","toBuffer","extractedBuffer","extract","floor","base64String","Buffer","from","toString","partIndex","partBase64String","substring","length","partFileName","writeFileSync","convertAndSaveToDB","error","Error","module","exports"],"sourceRoot":"D:\\PHAMHUNG\\code-demo\\coverImage\\controllers\\","sources":["imageController.js"],"sourcesContent":["const fs = require('fs');\r\nconst sharp = require('sharp');\r\nconst db = require('../db/db');\r\n\r\nasync function imageToText(inputImagePath, outputFolder, customFileName) {\r\n    // ... (phần code chuyển đổi từ trước)\r\n    // Kích thước của từng phần nhỏ\r\n    // const partWidth = 4816;\r\n    // const partHeight = 3072;\r\n    // const partWidth = 2600;\r\n    // const partHeight = 3184;\r\n    // const partWidth = 5760;\r\n    // const partHeight = 3336;\r\n    // const partWidth = 4242;\r\n    // const partHeight = 2456;\r\n    // const partWidth = 5372;\r\n    // const partHeight = 2824;\r\n    const partWidth = 8192;\r\n    const partHeight = 4096;\r\n    // Zoom factor\r\n    const zoom = 1.0;\r\n    // Đọc ảnh và chuyển đổi thành các phần nhỏ\r\n    const imageBuffer = fs.readFileSync(inputImagePath);\r\n    const image = sharp(imageBuffer);\r\n\r\n    // Tạo thư mục đầu ra nếu chưa tồn tại\r\n    if (!fs.existsSync(outputFolder)) {\r\n        fs.mkdirSync(outputFolder);\r\n    }\r\n    // Chuyển đổi và ghi vào các file văn bản\r\n    const imageMetadata = await image.metadata();\r\n    console.log('Image Metadata:', imageMetadata);\r\n\r\n    const resizedWidth = imageMetadata.width * zoom;\r\n    const resizedHeight = imageMetadata.height * zoom;\r\n\r\n    for (let top = 0; top < imageMetadata.height; top += partHeight) {\r\n        console.log('Vào vòng lặp top');\r\n        for (let left = 0; left < imageMetadata.width; left += partWidth) {\r\n            console.log('Vào vòng lặp left');\r\n\r\n            const adjustedWidth = Math.min(partWidth, imageMetadata.width - left);\r\n            const adjustedHeight = Math.min(partHeight, imageMetadata.height - top);\r\n            const adjustedLeft = Math.max(0, left);\r\n            const adjustedTop = Math.max(0, top);\r\n\r\n            const leftPercentage = adjustedLeft / imageMetadata.width;\r\n            const topPercentage = adjustedTop / imageMetadata.height;\r\n\r\n            const resizedBuffer = await image\r\n                .jpeg()\r\n                .resize(resizedWidth, resizedHeight)\r\n                .toBuffer();\r\n\r\n            const extractedBuffer = await sharp(resizedBuffer)\r\n                .extract({\r\n                    left: Math.floor(leftPercentage * resizedWidth),\r\n                    top: Math.floor(topPercentage * resizedHeight),\r\n                    width: adjustedWidth,\r\n                    height: adjustedHeight\r\n                })\r\n                .resize(adjustedWidth, adjustedHeight)\r\n                .toBuffer();\r\n\r\n            const base64String = 'data:image/jpeg;base64,' + Buffer.from(extractedBuffer).toString('base64');\r\n            for (let partIndex = 0; partIndex < 10; partIndex++) {\r\n                const partBase64String = base64String.substring(\r\n                    partIndex * (base64String.length / 10),\r\n                    (partIndex + 1) * (base64String.length / 10)\r\n                );\r\n            \r\n                const partFileName = `${outputFolder}/${customFileName}_part${partIndex + 1}.txt`;\r\n                fs.writeFileSync(partFileName, partBase64String);\r\n                console.log('Đã ghi file:', partFileName);\r\n            }\r\n        }\r\n    }\r\n    console.log('Image to text conversion completed.');\r\n}\r\n\r\nasync function convertAndSaveToDB(inputImagePath, outputFolder, customFileName) {\r\n    try {\r\n        await imageToText(inputImagePath, outputFolder, customFileName);\r\n\r\n        // const files = fs.readdirSync(outputFolder);\r\n\r\n        // for (const file of files) {\r\n        //     const content = fs.readFileSync(`${outputFolder}/${file}`, 'base64');\r\n        //     await db.query('INSERT INTO images(name, content) VALUES($1, $2)', [file, content]);\r\n        // }\r\n        console.log('Conversion and saving completed successfully');\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        throw new Error('Conversion and saving failed');\r\n    }\r\n}\r\n\r\n// async function textToImage(outputImagePath, partWidth, partHeight) {\r\n//     try {\r\n//         // Thực hiện truy vấn cơ sở dữ liệu để lấy dữ liệu từ bảng 'images'\r\n//         const result = await db.query('SELECT name, content FROM images');\r\n\r\n//         if (result.rows.length === 0) {\r\n//             console.error('No data found in the images table.');\r\n//             return;\r\n//         }\r\n\r\n//         // Chuyển đổi từng bản ghi từ cơ sở dữ liệu thành ảnh và lưu vào mảng\r\n//         const images = await Promise.all(result.rows.map(async (row) => {\r\n//             const base64Data = row.content.replace(/\\\\/g, \"\");\r\n//             const buffer = Buffer.from(base64Data, 'base64');\r\n//             console.log(base64Data);\r\n//             return buffer;\r\n//         }));\r\n\r\n//         const firstImageMetadata = await sharp(images[0]).metadata();\r\n\r\n//         // Gộp ảnh\r\n//         const mergedImage = await sharp({\r\n//             create: {\r\n//                 width: partWidth * Math.ceil(firstImageMetadata.width / partWidth),\r\n//                 height: partHeight * Math.ceil(firstImageMetadata.height / partHeight),\r\n//                 channels: 4, // Số kênh màu (4 cho RGBA)\r\n//                 background: { r: 255, g: 255, b: 255, alpha: 1 } // Màu nền\r\n//             }\r\n//         });\r\n\r\n//         // Sử dụng phương thức composite để gộp ảnh\r\n//         for (const image of images) {\r\n//             mergedImage.composite([{ input: image, left: 0, top: 0 }]);\r\n//         }\r\n\r\n//         // Ghi ảnh gộp vào file với định dạng PNG\r\n//         await mergedImage.toFormat('png').toFile(outputImagePath);\r\n//         console.log('Text to image conversion completed.');\r\n\r\n//         // Trả về đường dẫn tới tệp tin ảnh đã tạo\r\n//         return outputImagePath;\r\n//     } catch (error) {\r\n//         console.error('Error during conversion:', error);\r\n//         throw error;\r\n//     }\r\n// }\r\n\r\n\r\nmodule.exports = {\r\n    convertAndSaveToDB\r\n};\r\n"],"mappings":"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"}},"mtime":1705396922312}}